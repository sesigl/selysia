/*
 * Post Store API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"AiGenerateContent",
			strings.ToUpper("Post"),
			"/ai/generate-content",
			c.AiGenerateContent,
		},
		{
			"Delete",
			strings.ToUpper("Delete"),
			"/posts/{postId}",
			c.Delete,
		},
		{
			"Get",
			strings.ToUpper("Get"),
			"/posts",
			c.Get,
		},
		{
			"Post",
			strings.ToUpper("Post"),
			"/posts",
			c.Post,
		},
		{
			"Put",
			strings.ToUpper("Put"),
			"/posts/{postId}",
			c.Put,
		},
	}
}

// AiGenerateContent - Generate content
func (c *DefaultApiController) AiGenerateContent(w http.ResponseWriter, r *http.Request) {
	nextAuthSessionTokenParam := r.Header.Get("next-auth.session-token")
	aiContentPostRequestParam := AiContentPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&aiContentPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAiContentPostRequestRequired(aiContentPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AiGenerateContent(r.Context(), nextAuthSessionTokenParam, aiContentPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Delete - Delete post
func (c *DefaultApiController) Delete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	postIdParam := params["postId"]

	nextAuthSessionTokenParam := r.Header.Get("next-auth.session-token")
	result, err := c.service.Delete(r.Context(), postIdParam, nextAuthSessionTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Get - Get posts
func (c *DefaultApiController) Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	userIdParam := query.Get("userId")
	nextAuthSessionTokenParam := r.Header.Get("next-auth.session-token")
	result, err := c.service.Get(r.Context(), userIdParam, nextAuthSessionTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Post - Create post
func (c *DefaultApiController) Post(w http.ResponseWriter, r *http.Request) {
	nextAuthSessionTokenParam := r.Header.Get("next-auth.session-token")
	createOrUpdatePostRequestParam := CreateOrUpdatePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createOrUpdatePostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateOrUpdatePostRequestRequired(createOrUpdatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Post(r.Context(), nextAuthSessionTokenParam, createOrUpdatePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Put - Update post
func (c *DefaultApiController) Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	postIdParam := params["postId"]

	nextAuthSessionTokenParam := r.Header.Get("next-auth.session-token")
	createOrUpdatePostRequestParam := CreateOrUpdatePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createOrUpdatePostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateOrUpdatePostRequestRequired(createOrUpdatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Put(r.Context(), postIdParam, nextAuthSessionTokenParam, createOrUpdatePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
